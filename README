Работа по заданию:
Запуск: make qemu
Выход: Ctrl + A, затем X

Запуск в Отладчике (GDB):
make qemu-gdb

В отдельной вкладке:
riscv64-unknown-elf-gdb

И подключаемся к xv6 командой:
target remote localhost:26000

Точки Останова:
break main
continue

Выход из отладчика:
quit


Задача 1.
Задача состоит из трех частей, где нужно реализовать утилиту, которая:

Читает строку из терминала, содержащую два числа, разделённых пробелом.
Преобразует оба числа в int.
Вычисляет их сумму и выводит в терминал.
Нужно три реализации:

(a) На ассемблере с использованием gets и printf.
(b) На C с gets и printf.
(c) На C, но с использованием системного вызова read вместо gets.


Как работают пользовательские программы в xv6?:
В xv6 есть специальная директория user/, в которой хранятся исходники пользовательских программ (ls.c, echo.c, cat.c...)

Файлы пользовательских программ компилируются в исполняемые файлы и затем включаются в файловую систему xv6.
gets() — это функция, объявленная в ulib.c, которая использует системный вызов read() для чтения строки.
printf() — это функция вывода, объявленная в printf.c, она работает с системными вызовами write().
atoi() — функция преобразования строки в число, объявлена в ulib.c.



Создаем новую утилиту в xv6:

Добавить новый файл, например, sum_read.c, в каталог user/.
Написать код программы внутри этого файла.
Добавить файл в Makefile, чтобы он компилировался и включался в xv6.
Запустить make qemu и протестировать программу в xv6.



Добавим в хѵ6 системный вызов sys_add:

Добавим объявление системного вызова в kernel/syscall.h:
#define SYS_add    22
В kernel/syscall.c добавим:
extern uint64 sys_add(void);
[SYS_add]	  sys_add,
Создадим реализацию в kernel/sysproc.c ...
В user/user.h добавим объявление:
int add(int, int);
В user/usys.pl добавим:
entry("add");
Создадим тестовую утилиту user/sys_add_test.c:
Пересобираем
Проверяем
-------------------------------------
Условия:

СП Д/З No 0 Знакомство с хѵ6
Операционные системы, весна 2024

Подготовка и ознакомление.
Установить хѵб (см. ссылки на курс MIT в группе в Telegram), научиться собирать и запускать, выходить из системы, запускать в отладчике. 
Разобрать создание пользовательских приложений (в т.ч. библиотеку ulib и интерфейс системных вызовов) и создание системных вызовов, прочитать соответствующие разделы из хv6 book и примеры из https://github.com/lovyagin/xv6-riscv-samples/ (изучить ветви hello, hello_rv, sys_hello, просмотреть sys_args можно использовать git-diff и др. средства для просмотра вносимых изменений по сравнению с оригинальной ветвью riscv).

Задание
Задача 1. Написать пользовательскую утилиту, которая вводит с клавиатуры строку, содержащую два числа, разделенные пробелом, конвертирует их в данные типа int с помощью atoi и выводит их сумму в терминал.
(а) На ассемблере с использованием функций gets и printf
(ь) На Си с использованием функций gets и printf
(с) На Си с использованием системного вызова read и функции printf

Для реализации возможности ввода строки с помощью read следует делать чтение в цикле в буфер разумного (например, десятки байт), до тех пор, пока read не вернет е (конец файла) или отрицательное значение (ошибку), пока в буфер не попадет символ перевода строки '\n' (который следует удалить из строки заменить на \0') или пока буфер не заполнится последующие вызовы read должны дописывать в конец ранее введенных данных. Предельное количество вводимых байт должно соответствовать остатку буфера с запасом на символ '\0'. Проследить, чтобы по завершении ввода всегда получалась нуль-терминированная строка во избежание ее Дальнейшей некорректной обработки стандартными функциями. Для теста можно также использовать в цикле вызов read с заведомо небольшим пределом количества вводимых байт (один или несколько байт), чтобы убедиться, что буфер заполняется корректно. Добавить тестовый вывод получаемой с помощью read строки в ограничителях (например, чтобы при вводе 123 321\n вывелось |123 321] ).

NВ: при такой наивной реализации функционала gets через циклический вызов read есть риск, что в буфер после '\n' попадут символы начала следующей строки, которые будут утеряны. Для решения проблемы можно вводить с помощью read по 1 байту, как это сделано в реализации gets в хv6 (что не оптимально, так как требует большого количества системных вызовов), либо реализовывать функцию-обертку с буферизированным вводом для каждого файлового дескриптора. Сейчас с этим разбираться не нужно, достаточно ограничиваться наивной реализацией или посимвольным вводом, но нужно увидеть проблему и иметь ее ввиду.
Во всех пунктах обработать все ошибки, которые могут возникнуть и быть обнаружены (переполнение буфера, ошибка чтения, некорректный формат данных отсутствие пробела, пустые строки и т.д.) и вывести соответствующее сообщение.

-
Задача 2. Добавить в хѵ6 системный вызов sys_add, который получает на вход два целых числа и возвращает их сумму. Написать тестовую утилиту (например, в виде решения задачи 1b) для проверки работы вызова.
------------------------------------------------

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
